/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_iwa_5fauthserver_2eproto__INCLUDED
#define PROTOBUF_C_iwa_5fauthserver_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _IWAserverAuth__LogRegClient IWAserverAuth__LogRegClient;
typedef struct _IWAserverAuth__LogRegServer IWAserverAuth__LogRegServer;
typedef struct _IWAserverAuth__ProofClient IWAserverAuth__ProofClient;
typedef struct _IWAserverAuth__ProofServer IWAserverAuth__ProofServer;
typedef struct _IWAserverAuth__ServerListClient IWAserverAuth__ServerListClient;
typedef struct _IWAserverAuth__ServerListServer IWAserverAuth__ServerListServer;
typedef struct _IWAserverAuth__ServerListServer__Server IWAserverAuth__ServerListServer__Server;
typedef struct _IWAserverAuth__ServerListServer__Server__Character IWAserverAuth__ServerListServer__Server__Character;


/* --- enums --- */

typedef enum _IWAserverAuth__ResultCode {
  I_WASERVER_AUTH__RESULT_CODE__SUCCESS = 0,
  I_WASERVER_AUTH__RESULT_CODE__UNKNOWN_ERROR = 10,
  I_WASERVER_AUTH__RESULT_CODE__UNPACK_MESSAGE_ERROR = 20,
  I_WASERVER_AUTH__RESULT_CODE__REG_USERNAME_EMPTY = 100,
  I_WASERVER_AUTH__RESULT_CODE__REG_PASSWORD_EMPTY = 101,
  I_WASERVER_AUTH__RESULT_CODE__REG_DB_INSERT_ERROR = 102,
  I_WASERVER_AUTH__RESULT_CODE__LOGON_USERNAME_EMPTY = 200,
  I_WASERVER_AUTH__RESULT_CODE__LOGON_DB_QUERY_ERROR = 201,
  I_WASERVER_AUTH__RESULT_CODE__LOGON_ACCOUNT_NOEXIST = 202,
  I_WASERVER_AUTH__RESULT_CODE__PROOF_AVALUE_INCORRECT = 300,
  I_WASERVER_AUTH__RESULT_CODE__PROOF_M1VALUE_INCORRECT = 301,
  I_WASERVER_AUTH__RESULT_CODE__PROOF_MVALUE_UNMATCH = 302,
  I_WASERVER_AUTH__RESULT_CODE__PROOF_DB_UPDATE_ERROR = 303
} IWAserverAuth__ResultCode;

/* --- messages --- */

struct  _IWAserverAuth__LogRegClient
{
  ProtobufCMessage base;
  char *gamename;
  uint32_t version1;
  uint32_t version2;
  uint32_t version3;
  uint32_t build;
  char *platform;
  char *os;
  char *country;
  int32_t timezone_bias;
  char *username;
  char *password_hash;
};
#define I_WASERVER_AUTH__LOG_REG_CLIENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&i_waserver_auth__log_reg_client__descriptor) \
    , NULL, 0, 0, 0, 0, NULL, NULL, NULL, 0, NULL, NULL }


struct  _IWAserverAuth__LogRegServer
{
  ProtobufCMessage base;
  IWAserverAuth__ResultCode result;
  protobuf_c_boolean has_b;
  ProtobufCBinaryData b;
  protobuf_c_boolean has_g;
  ProtobufCBinaryData g;
  protobuf_c_boolean has_n;
  ProtobufCBinaryData n;
  protobuf_c_boolean has_s;
  ProtobufCBinaryData s;
};
#define I_WASERVER_AUTH__LOG_REG_SERVER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&i_waserver_auth__log_reg_server__descriptor) \
    , 0, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL} }


struct  _IWAserverAuth__ProofClient
{
  ProtobufCMessage base;
  ProtobufCBinaryData a;
  ProtobufCBinaryData m1;
};
#define I_WASERVER_AUTH__PROOF_CLIENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&i_waserver_auth__proof_client__descriptor) \
    , {0,NULL}, {0,NULL} }


struct  _IWAserverAuth__ProofServer
{
  ProtobufCMessage base;
  IWAserverAuth__ResultCode result;
};
#define I_WASERVER_AUTH__PROOF_SERVER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&i_waserver_auth__proof_server__descriptor) \
    , 0 }


struct  _IWAserverAuth__ServerListClient
{
  ProtobufCMessage base;
  uint32_t reserved;
};
#define I_WASERVER_AUTH__SERVER_LIST_CLIENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&i_waserver_auth__server_list_client__descriptor) \
    , 0 }


struct  _IWAserverAuth__ServerListServer__Server__Character
{
  ProtobufCMessage base;
  uint32_t cid;
  char *name;
  uint32_t grade;
  uint32_t race;
  uint32_t nation;
};
#define I_WASERVER_AUTH__SERVER_LIST_SERVER__SERVER__CHARACTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&i_waserver_auth__server_list_server__server__character__descriptor) \
    , 0, NULL, 0, 0, 0 }


struct  _IWAserverAuth__ServerListServer__Server
{
  ProtobufCMessage base;
  uint32_t sid;
  uint32_t region;
  uint32_t status;
  char *name;
  char *hit;
  char *address;
  uint32_t port;
  uint32_t char_num;
  size_t n_characters;
  IWAserverAuth__ServerListServer__Server__Character **characters;
};
#define I_WASERVER_AUTH__SERVER_LIST_SERVER__SERVER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&i_waserver_auth__server_list_server__server__descriptor) \
    , 0, 0, 0, NULL, NULL, NULL, 0, 0, 0,NULL }


struct  _IWAserverAuth__ServerListServer
{
  ProtobufCMessage base;
  uint32_t num;
  size_t n_servers;
  IWAserverAuth__ServerListServer__Server **servers;
};
#define I_WASERVER_AUTH__SERVER_LIST_SERVER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&i_waserver_auth__server_list_server__descriptor) \
    , 0, 0,NULL }


/* IWAserverAuth__LogRegClient methods */
void   i_waserver_auth__log_reg_client__init
                     (IWAserverAuth__LogRegClient         *message);
size_t i_waserver_auth__log_reg_client__get_packed_size
                     (const IWAserverAuth__LogRegClient   *message);
size_t i_waserver_auth__log_reg_client__pack
                     (const IWAserverAuth__LogRegClient   *message,
                      uint8_t             *out);
size_t i_waserver_auth__log_reg_client__pack_to_buffer
                     (const IWAserverAuth__LogRegClient   *message,
                      ProtobufCBuffer     *buffer);
IWAserverAuth__LogRegClient *
       i_waserver_auth__log_reg_client__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   i_waserver_auth__log_reg_client__free_unpacked
                     (IWAserverAuth__LogRegClient *message,
                      ProtobufCAllocator *allocator);
/* IWAserverAuth__LogRegServer methods */
void   i_waserver_auth__log_reg_server__init
                     (IWAserverAuth__LogRegServer         *message);
size_t i_waserver_auth__log_reg_server__get_packed_size
                     (const IWAserverAuth__LogRegServer   *message);
size_t i_waserver_auth__log_reg_server__pack
                     (const IWAserverAuth__LogRegServer   *message,
                      uint8_t             *out);
size_t i_waserver_auth__log_reg_server__pack_to_buffer
                     (const IWAserverAuth__LogRegServer   *message,
                      ProtobufCBuffer     *buffer);
IWAserverAuth__LogRegServer *
       i_waserver_auth__log_reg_server__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   i_waserver_auth__log_reg_server__free_unpacked
                     (IWAserverAuth__LogRegServer *message,
                      ProtobufCAllocator *allocator);
/* IWAserverAuth__ProofClient methods */
void   i_waserver_auth__proof_client__init
                     (IWAserverAuth__ProofClient         *message);
size_t i_waserver_auth__proof_client__get_packed_size
                     (const IWAserverAuth__ProofClient   *message);
size_t i_waserver_auth__proof_client__pack
                     (const IWAserverAuth__ProofClient   *message,
                      uint8_t             *out);
size_t i_waserver_auth__proof_client__pack_to_buffer
                     (const IWAserverAuth__ProofClient   *message,
                      ProtobufCBuffer     *buffer);
IWAserverAuth__ProofClient *
       i_waserver_auth__proof_client__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   i_waserver_auth__proof_client__free_unpacked
                     (IWAserverAuth__ProofClient *message,
                      ProtobufCAllocator *allocator);
/* IWAserverAuth__ProofServer methods */
void   i_waserver_auth__proof_server__init
                     (IWAserverAuth__ProofServer         *message);
size_t i_waserver_auth__proof_server__get_packed_size
                     (const IWAserverAuth__ProofServer   *message);
size_t i_waserver_auth__proof_server__pack
                     (const IWAserverAuth__ProofServer   *message,
                      uint8_t             *out);
size_t i_waserver_auth__proof_server__pack_to_buffer
                     (const IWAserverAuth__ProofServer   *message,
                      ProtobufCBuffer     *buffer);
IWAserverAuth__ProofServer *
       i_waserver_auth__proof_server__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   i_waserver_auth__proof_server__free_unpacked
                     (IWAserverAuth__ProofServer *message,
                      ProtobufCAllocator *allocator);
/* IWAserverAuth__ServerListClient methods */
void   i_waserver_auth__server_list_client__init
                     (IWAserverAuth__ServerListClient         *message);
size_t i_waserver_auth__server_list_client__get_packed_size
                     (const IWAserverAuth__ServerListClient   *message);
size_t i_waserver_auth__server_list_client__pack
                     (const IWAserverAuth__ServerListClient   *message,
                      uint8_t             *out);
size_t i_waserver_auth__server_list_client__pack_to_buffer
                     (const IWAserverAuth__ServerListClient   *message,
                      ProtobufCBuffer     *buffer);
IWAserverAuth__ServerListClient *
       i_waserver_auth__server_list_client__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   i_waserver_auth__server_list_client__free_unpacked
                     (IWAserverAuth__ServerListClient *message,
                      ProtobufCAllocator *allocator);
/* IWAserverAuth__ServerListServer__Server__Character methods */
void   i_waserver_auth__server_list_server__server__character__init
                     (IWAserverAuth__ServerListServer__Server__Character         *message);
/* IWAserverAuth__ServerListServer__Server methods */
void   i_waserver_auth__server_list_server__server__init
                     (IWAserverAuth__ServerListServer__Server         *message);
/* IWAserverAuth__ServerListServer methods */
void   i_waserver_auth__server_list_server__init
                     (IWAserverAuth__ServerListServer         *message);
size_t i_waserver_auth__server_list_server__get_packed_size
                     (const IWAserverAuth__ServerListServer   *message);
size_t i_waserver_auth__server_list_server__pack
                     (const IWAserverAuth__ServerListServer   *message,
                      uint8_t             *out);
size_t i_waserver_auth__server_list_server__pack_to_buffer
                     (const IWAserverAuth__ServerListServer   *message,
                      ProtobufCBuffer     *buffer);
IWAserverAuth__ServerListServer *
       i_waserver_auth__server_list_server__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   i_waserver_auth__server_list_server__free_unpacked
                     (IWAserverAuth__ServerListServer *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*IWAserverAuth__LogRegClient_Closure)
                 (const IWAserverAuth__LogRegClient *message,
                  void *closure_data);
typedef void (*IWAserverAuth__LogRegServer_Closure)
                 (const IWAserverAuth__LogRegServer *message,
                  void *closure_data);
typedef void (*IWAserverAuth__ProofClient_Closure)
                 (const IWAserverAuth__ProofClient *message,
                  void *closure_data);
typedef void (*IWAserverAuth__ProofServer_Closure)
                 (const IWAserverAuth__ProofServer *message,
                  void *closure_data);
typedef void (*IWAserverAuth__ServerListClient_Closure)
                 (const IWAserverAuth__ServerListClient *message,
                  void *closure_data);
typedef void (*IWAserverAuth__ServerListServer__Server__Character_Closure)
                 (const IWAserverAuth__ServerListServer__Server__Character *message,
                  void *closure_data);
typedef void (*IWAserverAuth__ServerListServer__Server_Closure)
                 (const IWAserverAuth__ServerListServer__Server *message,
                  void *closure_data);
typedef void (*IWAserverAuth__ServerListServer_Closure)
                 (const IWAserverAuth__ServerListServer *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    i_waserver_auth__result_code__descriptor;
extern const ProtobufCMessageDescriptor i_waserver_auth__log_reg_client__descriptor;
extern const ProtobufCMessageDescriptor i_waserver_auth__log_reg_server__descriptor;
extern const ProtobufCMessageDescriptor i_waserver_auth__proof_client__descriptor;
extern const ProtobufCMessageDescriptor i_waserver_auth__proof_server__descriptor;
extern const ProtobufCMessageDescriptor i_waserver_auth__server_list_client__descriptor;
extern const ProtobufCMessageDescriptor i_waserver_auth__server_list_server__descriptor;
extern const ProtobufCMessageDescriptor i_waserver_auth__server_list_server__server__descriptor;
extern const ProtobufCMessageDescriptor i_waserver_auth__server_list_server__server__character__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_iwa_5fauthserver_2eproto__INCLUDED */
